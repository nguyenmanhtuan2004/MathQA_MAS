{
  "accuracy": 97.0,
  "correct": 291,
  "total": 300,
  "wrong_answers": [
    {
      "timestamp": "2025-07-22 23:24:56",
      "question": "Mia found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have at least 13 roller coasters?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_1 = [7, 8, 9]  # Represents 10+ articles (10-19)\nleaves_stem_2 = [6]         # Represents 20+ articles (20-29)\nleaves_stem_3 = [1, 6, 7]   # Represents 30+ articles (30-39)\nleaves_stem_4 = [3, 5, 5, 6, 9]  # Represents 40+ articles (40-49)\n\n# Step 2: Count the number of parks with at least 13 roller coasters\n# This corresponds to stem 1 (10-19) with leaves 7, 8, 9 (3 parks)\n# Stem 2 (20-29) has 1 park (6)\n# Stem 3 (30-39) has 3 parks (1, 6, 7)\n# Stem 4 (40-49) has 5 parks (3, 5, 5, 6, 9)\n\ncount_1 = len(leaves_stem_1)  # 3 parks (10-19)\ncount_2 = len(leaves_stem_2)  # 1 park (20-29)\ncount_3 = len(leaves_stem_3)  # 3 parks (30-39)\ncount_4 = len(leaves_stem_4)  # 5 parks (40-49)\n\n# Step 3: Add up all parks with at least 13 roller coasters\ntotal_parks = count_2 + count_3 + count_4  # Only count parks from stem 2, 3, and 4\nresult = total_parks",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_1 = [7, 8, 9]  # Represents 10+ articles (10-19)\nleaves_stem_2 = [6]         # Represents 20+ articles (20-29)\nleaves_stem_3 = [1, 6, 7]   # Represents 30+ articles (30-39)\nleaves_stem_4 = [3, 5, 5, 6, 9]  # Represents 40+ articles (40-49)\n\n# Step 2: Count the number of parks with at least 13 roller coasters\n# This corresponds to stem 1 (10-19) with leaves 7, 8, 9 (3 parks)\n# Stem 2 (20-29) has 1 park (6)\n# Stem 3 (30-39) has 3 parks (1, 6, 7)\n# Stem 4 (40-49) has 5 parks (3, 5, 5, 6, 9)\n\ncount_1 = len(leaves_stem_1)  # 3 parks (10-19)\ncount_2 = len(leaves_stem_2)  # 1 park (20-29)\ncount_3 = len(leaves_stem_3)  # 3 parks (30-39)\ncount_4 = len(leaves_stem_4)  # 5 parks (40-49)\n\n# Step 3: Add up all parks with at least 13 roller coasters\ntotal_parks = count_2 + count_3 + count_4  # Only count parks from stem 2, 3, and 4\nresult = total_parks\n```",
      "true_answer": "12",
      "predicted_answer": "9",
      "context": "Roller coasters per amusement park\n\n| Stem | Leaf  |\n| --- | --- |\n| 1 | 7, 8, 9 |\n| 2 | 6 |\n| 3 | 1, 6, 7 |\n| 4 | 3, 5, 5, 6, 9 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:25:29",
      "question": "A farmer counted the number of apples on each tree in her orchard. How many trees have at least 60 apples but fewer than 88 apples?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_3 = [0, 1, 2, 6, 6, 7, 7]  # Represents 30-39 apples\nleaves_stem_4 = [0, 0, 0, 8]           # Represents 40-49 apples\nleaves_stem_5 = [0, 3, 6, 8, 9]        # Represents 50-59 apples\nleaves_stem_6 = [1, 3]                  # Represents 60-69 apples\nleaves_stem_7 = []                       # Represents 70-79 apples\nleaves_stem_8 = [3, 3, 5, 8, 9]        # Represents 80-89 apples\n\n# Step 2: Count trees with at least 60 apples but fewer than 88 apples\ncount_60_to_69 = len(leaves_stem_6)    # Count trees with 60-69 apples\ncount_70_to_79 = len(leaves_stem_7)    # Count trees with 70-79 apples\ncount_80_to_87 = len(leaves_stem_8)     # Count trees with 80-89 apples (we only want 80-87)\n\n# Step 3: Total trees with at least 60 but fewer than 88 apples\ntotal_trees = count_60_to_69 + count_70_to_79 + count_80_to_87\nresult = total_trees",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_3 = [0, 1, 2, 6, 6, 7, 7]  # Represents 30-39 apples\nleaves_stem_4 = [0, 0, 0, 8]           # Represents 40-49 apples\nleaves_stem_5 = [0, 3, 6, 8, 9]        # Represents 50-59 apples\nleaves_stem_6 = [1, 3]                  # Represents 60-69 apples\nleaves_stem_7 = []                       # Represents 70-79 apples\nleaves_stem_8 = [3, 3, 5, 8, 9]        # Represents 80-89 apples\n\n# Step 2: Count trees with at least 60 apples but fewer than 88 apples\ncount_60_to_69 = len(leaves_stem_6)    # Count trees with 60-69 apples\ncount_70_to_79 = len(leaves_stem_7)    # Count trees with 70-79 apples\ncount_80_to_87 = len(leaves_stem_8)     # Count trees with 80-89 apples (we only want 80-87)\n\n# Step 3: Total trees with at least 60 but fewer than 88 apples\ntotal_trees = count_60_to_69 + count_70_to_79 + count_80_to_87\nresult = total_trees\n```",
      "true_answer": "5",
      "predicted_answer": "7",
      "context": "Apples per tree\n\n| Stem | Leaf  |\n| --- | --- |\n| 3 | 0, 1, 2, 6, 6, 7, 7 |\n| 4 | 0, 0, 0, 8 |\n| 5 | 0, 3, 6, 8, 9 |\n| 6 | 1, 3 |\n| 7 |  |\n| 8 | 3, 3, 5, 8, 9 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:25:50",
      "question": "A food industry researcher compiled the revenues of several pizzerias. How much did Taste of New York make from pizza sales?",
      "program": "# Step 1: Set the number of vegetarian and cheese pizzas sold at Taste of New York\nvegetarian_pizzas = 10\ncheese_pizzas = 13\n\n# Step 2: Calculate the revenue from vegetarian pizzas\nrevenue_vegetarian = vegetarian_pizzas * 10  # Price per vegetarian pizza\n\n# Step 3: Calculate the revenue from cheese pizzas\nrevenue_cheese = cheese_pizzas * 13  # Price per cheese pizza\n\n# Step 4: Calculate total revenue\ntotal_revenue = revenue_vegetarian + revenue_cheese\n\n# Step 5: Assign the result\nresult = total_revenue",
      "response": "```python\n# Step 1: Set the number of vegetarian and cheese pizzas sold at Taste of New York\nvegetarian_pizzas = 10\ncheese_pizzas = 13\n\n# Step 2: Calculate the revenue from vegetarian pizzas\nrevenue_vegetarian = vegetarian_pizzas * 10  # Price per vegetarian pizza\n\n# Step 3: Calculate the revenue from cheese pizzas\nrevenue_cheese = cheese_pizzas * 13  # Price per cheese pizza\n\n# Step 4: Calculate total revenue\ntotal_revenue = revenue_vegetarian + revenue_cheese\n\n# Step 5: Assign the result\nresult = total_revenue\n```",
      "true_answer": "23",
      "predicted_answer": "269",
      "context": "Pizza sales\n\n| Restaurant | Vegetarian pizzas | Cheese pizzas |\n| --- | --- | --- |\n| Dan's Deep Dish | $10 | $11 |\n| Taste of New York | $10 | $13 |\n| The Big Cheese | $16 | $8 |\n| Pizzas Only | $17 | $17 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:27:46",
      "question": "Miss Pratt ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. How many people did fewer than 90 sit-ups?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_6 = [0, 1, 1, 3, 3, 5, 5, 6, 6, 9]\nleaves_stem_7 = [2, 4, 5, 8]\nleaves_stem_8 = [0, 1, 6, 6, 6, 9]\nleaves_stem_9 = [0]\n\n# Step 2: Count all leaves from stems 6, 7, and 8 (representing fewer than 90 sit-ups)\ncount_6 = len(leaves_stem_6)  # All leaves in stem 6\ncount_7 = len(leaves_stem_7)  # All leaves in stem 7\ncount_8 = len(leaves_stem_8)  # All leaves in stem 8\n\n# Step 3: Add up all students who did fewer than 90 sit-ups\ntotal_students_fewer_than_90 = count_6 + count_7 + count_8\nresult = total_students_fewer_than_90",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_6 = [0, 1, 1, 3, 3, 5, 5, 6, 6, 9]\nleaves_stem_7 = [2, 4, 5, 8]\nleaves_stem_8 = [0, 1, 6, 6, 6, 9]\nleaves_stem_9 = [0]\n\n# Step 2: Count all leaves from stems 6, 7, and 8 (representing fewer than 90 sit-ups)\ncount_6 = len(leaves_stem_6)  # All leaves in stem 6\ncount_7 = len(leaves_stem_7)  # All leaves in stem 7\ncount_8 = len(leaves_stem_8)  # All leaves in stem 8\n\n# Step 3: Add up all students who did fewer than 90 sit-ups\ntotal_students_fewer_than_90 = count_6 + count_7 + count_8\nresult = total_students_fewer_than_90\n```",
      "true_answer": "21",
      "predicted_answer": "20",
      "context": "Sit-up competition (number of sit-ups)\n\n| Stem | Leaf  |\n| --- | --- |\n| 6 | 0, 1, 1, 3, 3, 5, 5, 6, 6, 9, 9 |\n| 7 | 2, 4, 5, 8 |\n| 8 | 0, 1, 6, 6, 6, 9 |\n| 9 | 0 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:28:58",
      "question": "A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 44 broken crayons but fewer than 54 broken crayons?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [0, 0, 2, 4, 5, 5, 9]  # Represents 20-29 broken crayons\nleaves_stem_3 = [0, 2, 8, 9, 9]        # Represents 30-39 broken crayons\nleaves_stem_4 = []                     # Represents 40-49 broken crayons\nleaves_stem_5 = [0, 3, 6, 8]           # Represents 50-59 broken crayons\nleaves_stem_6 = [4, 6]                 # Represents 60-69 broken crayons\n\n# Step 2: Count the number of boxes with at least 44 but fewer than 54 broken crayons\n# This corresponds to stem 4 (40-49) and stem 5 (50-59)\ncount_stem_4 = len(leaves_stem_4)      # 0 boxes in stem 4\ncount_stem_5 = len(leaves_stem_5)      # 4 boxes in stem 5 (50, 53, 56, 58)\n\n# Step 3: Total boxes with at least 44 but fewer than 54 broken crayons\ntotal_boxes = count_stem_4 + count_stem_5\nresult = total_boxes",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [0, 0, 2, 4, 5, 5, 9]  # Represents 20-29 broken crayons\nleaves_stem_3 = [0, 2, 8, 9, 9]        # Represents 30-39 broken crayons\nleaves_stem_4 = []                     # Represents 40-49 broken crayons\nleaves_stem_5 = [0, 3, 6, 8]           # Represents 50-59 broken crayons\nleaves_stem_6 = [4, 6]                 # Represents 60-69 broken crayons\n\n# Step 2: Count the number of boxes with at least 44 but fewer than 54 broken crayons\n# This corresponds to stem 4 (40-49) and stem 5 (50-59)\ncount_stem_4 = len(leaves_stem_4)      # 0 boxes in stem 4\ncount_stem_5 = len(leaves_stem_5)      # 4 boxes in stem 5 (50, 53, 56, 58)\n\n# Step 3: Total boxes with at least 44 but fewer than 54 broken crayons\ntotal_boxes = count_stem_4 + count_stem_5\nresult = total_boxes\n```",
      "true_answer": "2",
      "predicted_answer": "4",
      "context": "Broken crayons per box\n\n| Stem | Leaf  |\n| --- | --- |\n| 2 | 0, 0, 2, 4, 5, 5, 9 |\n| 3 | 0, 2, 8, 9, 9 |\n| 4 |  |\n| 5 | 0, 3, 6, 8 |\n| 6 | 4, 6 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:34:57",
      "question": "The owner of a plant nursery wrote down the number of roses on each bush. How many bushes have at least 79 roses?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_3 = [3, 7]      # Represents 30-39 roses\nleaves_stem_4 = [3, 3, 8]   # Represents 40-49 roses\nleaves_stem_5 = [6, 7, 8]   # Represents 50-59 roses\nleaves_stem_6 = [2, 5, 8]   # Represents 60-69 roses\nleaves_stem_7 = [1, 4, 4, 6] # Represents 70-79 roses\nleaves_stem_8 = [2, 9]      # Represents 80-89 roses\nleaves_stem_9 = [0]         # Represents 90-99 roses\n\n# Step 2: Count bushes with at least 79 roses\n# Bushes with 70-79 roses\ncount_7 = len(leaves_stem_7)  # 4 bushes\n# Bushes with 80-89 roses\ncount_8 = len(leaves_stem_8)  # 2 bushes\n# Bushes with 90-99 roses\ncount_9 = len(leaves_stem_9)  # 1 bush\n\n# Step 3: Add up all bushes with at least 79 roses\ntotal_bushes = count_7 + count_8 + count_9\nresult = total_bushes",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_3 = [3, 7]      # Represents 30-39 roses\nleaves_stem_4 = [3, 3, 8]   # Represents 40-49 roses\nleaves_stem_5 = [6, 7, 8]   # Represents 50-59 roses\nleaves_stem_6 = [2, 5, 8]   # Represents 60-69 roses\nleaves_stem_7 = [1, 4, 4, 6] # Represents 70-79 roses\nleaves_stem_8 = [2, 9]      # Represents 80-89 roses\nleaves_stem_9 = [0]         # Represents 90-99 roses\n\n# Step 2: Count bushes with at least 79 roses\n# Bushes with 70-79 roses\ncount_7 = len(leaves_stem_7)  # 4 bushes\n# Bushes with 80-89 roses\ncount_8 = len(leaves_stem_8)  # 2 bushes\n# Bushes with 90-99 roses\ncount_9 = len(leaves_stem_9)  # 1 bush\n\n# Step 3: Add up all bushes with at least 79 roses\ntotal_bushes = count_7 + count_8 + count_9\nresult = total_bushes\n```",
      "true_answer": "3",
      "predicted_answer": "7",
      "context": "Roses per bush\n\n| Stem | Leaf  |\n| --- | --- |\n| 3 | 3, 7 |\n| 4 | 3, 3, 8 |\n| 5 | 6, 7, 8 |\n| 6 | 2, 5, 8 |\n| 7 | 1, 4, 4, 6 |\n| 8 | 2, 9 |\n| 9 | 0 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:38:21",
      "question": "Gabriel conducted a blind taste test on some of his friends in order to determine if organic fruits tasted different than non-organic fruits. Each friend ate one type of fruit. What is the probability that a randomly selected friend tasted apples and preferred non-organic? Simplify any fractions.",
      "program": "# Step 1: Set the number of organic and non-organic apples\norganic_apples = 3\nnon_organic_apples = 5\n\n# Step 2: Calculate the total number of apples\ntotal_apples = organic_apples + non_organic_apples\n\n# Step 3: The number of friends who tasted apples and preferred non-organic is equal to non_organic_apples\npreferred_non_organic = non_organic_apples\n\n# Step 4: Find the greatest common divisor (GCD) of preferred_non_organic and total_apples\nfrom math import gcd\ng = gcd(preferred_non_organic, total_apples)\n\n# Step 5: Simplify the numerator and denominator\nsimplified_numerator = preferred_non_organic // g\nsimplified_denominator = total_apples // g\n\n# Step 6: Format the simplified fraction\nfraction = f\"{simplified_numerator}/{simplified_denominator}\"\n\n# Step 7: Assign the result\nresult = fraction",
      "response": "```python\n# Step 1: Set the number of organic and non-organic apples\norganic_apples = 3\nnon_organic_apples = 5\n\n# Step 2: Calculate the total number of apples\ntotal_apples = organic_apples + non_organic_apples\n\n# Step 3: The number of friends who tasted apples and preferred non-organic is equal to non_organic_apples\npreferred_non_organic = non_organic_apples\n\n# Step 4: Find the greatest common divisor (GCD) of preferred_non_organic and total_apples\nfrom math import gcd\ng = gcd(preferred_non_organic, total_apples)\n\n# Step 5: Simplify the numerator and denominator\nsimplified_numerator = preferred_non_organic // g\nsimplified_denominator = total_apples // g\n\n# Step 6: Format the simplified fraction\nfraction = f\"{simplified_numerator}/{simplified_denominator}\"\n\n# Step 7: Assign the result\nresult = fraction\n```",
      "true_answer": "0.45454545454545453",
      "predicted_answer": "0.625",
      "context": "|  | Organic | Non-organic |\n| --- | --- | --- |\n| Apples | 3 | 5 |\n| Peaches | 1 | 2 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:39:23",
      "question": "In the first episode of a reality show, contestants had to spin two wheels of fate. Spinning the first wheel determined the remote location where contestants would reside for the duration of the season. Spinning the second wheel determined which \"bonus survival tool\" they would be allowed to bring, along with a few other necessary items. What is the probability that a randomly selected participant spun the second wheel and landed on a tent and spun the first wheel and landed on desert? Simplify any fractions.",
      "program": "# Step 1: Set the number of outcomes for each scenario\ntents_desert = 3  # Tents in the desert\ntotal_tents = 3 + 1  # Total tents in both environments\nmatches_desert = 5  # Matches in the desert\ntotal_matches = 5 + 4  # Total matches in both environments\n\n# Step 2: Calculate the probability of each event\nprob_tent_desert = tents_desert / total_tents\nprob_matches_desert = matches_desert / total_matches\n\n# Step 3: Calculate the combined probability of both events\ncombined_probability = prob_tent_desert * prob_matches_desert\n\n# Step 4: Convert the combined probability to a fraction\nfrom fractions import Fraction\nfraction_result = Fraction(combined_probability).limit_denominator()\n\n# Step 5: Assign the result\nresult = f\"{fraction_result.numerator}/{fraction_result.denominator}\"",
      "response": "```python\n# Step 1: Set the number of outcomes for each scenario\ntents_desert = 3  # Tents in the desert\ntotal_tents = 3 + 1  # Total tents in both environments\nmatches_desert = 5  # Matches in the desert\ntotal_matches = 5 + 4  # Total matches in both environments\n\n# Step 2: Calculate the probability of each event\nprob_tent_desert = tents_desert / total_tents\nprob_matches_desert = matches_desert / total_matches\n\n# Step 3: Calculate the combined probability of both events\ncombined_probability = prob_tent_desert * prob_matches_desert\n\n# Step 4: Convert the combined probability to a fraction\nfrom fractions import Fraction\nfraction_result = Fraction(combined_probability).limit_denominator()\n\n# Step 5: Assign the result\nresult = f\"{fraction_result.numerator}/{fraction_result.denominator}\"\n```",
      "true_answer": "0.23076923076923078",
      "predicted_answer": "0.4166666666666667",
      "context": "|  | Desert | Rainforest |\n| --- | --- | --- |\n| A tent | 3 | 1 |\n| Matches | 5 | 4 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-22 23:39:44",
      "question": "Mrs. Benton hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2015 and 2016?",
      "program": "# Step 1: Set the number of entries for 2015 and 2016\nentries_2015 = 15\nentries_2016 = 19\n\n# Step 2: Calculate the change in entries from 2015 to 2016\nchange = entries_2016 - entries_2015\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / entries_2015\n\n# Step 4: Assign the result\nresult = rate_of_change",
      "response": "```python\n# Step 1: Set the number of entries for 2015 and 2016\nentries_2015 = 15\nentries_2016 = 19\n\n# Step 2: Calculate the change in entries from 2015 to 2016\nchange = entries_2016 - entries_2015\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / entries_2015\n\n# Step 4: Assign the result\nresult = rate_of_change\n```",
      "true_answer": "4",
      "predicted_answer": "0.26666666666666666",
      "context": "Art contest entries\n\n| Year | Number of entries |\n| --- | --- |\n| 2015 | 15 |\n| 2016 | 19 |\n| 2017 | 24 |\n| 2018 | 15 |\n| 2019 | 18 |\n",
      "correct": false
    }
  ]
}
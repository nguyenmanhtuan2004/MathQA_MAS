{
  "accuracy": 95.33333333333334,
  "correct": 286,
  "total": 300,
  "wrong_answers": [
    {
      "timestamp": "2025-07-15 23:10:48",
      "question": "Each year the Cedarburg School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2010 and 2011?",
      "program": "# Step 1: Set the per-student budgets for 2010 and 2011\nbudget_2010 = 23\nbudget_2011 = 26\n\n# Step 2: Calculate the change in budget from 2010 to 2011\nchange = budget_2011 - budget_2010\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / budget_2010\n\n# Step 4: Assign the result\nresult = rate_of_change",
      "response": "```python\n# Step 1: Set the per-student budgets for 2010 and 2011\nbudget_2010 = 23\nbudget_2011 = 26\n\n# Step 2: Calculate the change in budget from 2010 to 2011\nchange = budget_2011 - budget_2010\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / budget_2010\n\n# Step 4: Assign the result\nresult = rate_of_change\n```",
      "true_answer": "3",
      "predicted_answer": "0.13043478260869565",
      "context": "Cedarburg School District sports budget\n\n| Year | Per-student budget |\n| --- | --- |\n| 2009 | $27 |\n| 2010 | $23 |\n| 2011 | $26 |\n| 2012 | $19 |\n| 2013 | $30 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:12:12",
      "question": "Principal Navarro reported the state test scores from some students at her school. How many students scored at least 45 points but fewer than 59 points?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [0]          # Represents scores 20-29\nleaves_stem_3 = [4]          # Represents scores 30-39\nleaves_stem_4 = [0, 3, 6]    # Represents scores 40-49 and 40-46\nleaves_stem_5 = [1, 1, 5]    # Represents scores 50-51 and 55\nleaves_stem_6 = [0, 4]       # Represents scores 60-64\n\n# Step 2: Count the number of students scoring at least 45 but fewer than 59\ncount_4 = len(leaves_stem_4)  # 40-49: 3 students (40, 43, 46)\ncount_5 = len(leaves_stem_5)  # 50-59: 3 students (51, 51, 55)\n\n# Step 3: Add up the counts from stems 4 and 5\ntotal_students = count_4 + count_5\nresult = total_students",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [0]          # Represents scores 20-29\nleaves_stem_3 = [4]          # Represents scores 30-39\nleaves_stem_4 = [0, 3, 6]    # Represents scores 40-49 and 40-46\nleaves_stem_5 = [1, 1, 5]    # Represents scores 50-51 and 55\nleaves_stem_6 = [0, 4]       # Represents scores 60-64\n\n# Step 2: Count the number of students scoring at least 45 but fewer than 59\ncount_4 = len(leaves_stem_4)  # 40-49: 3 students (40, 43, 46)\ncount_5 = len(leaves_stem_5)  # 50-59: 3 students (51, 51, 55)\n\n# Step 3: Add up the counts from stems 4 and 5\ntotal_students = count_4 + count_5\nresult = total_students\n```",
      "true_answer": "4",
      "predicted_answer": "6",
      "context": "Test scores\n\n| Stem | Leaf  |\n| --- | --- |\n| 2 | 0 |\n| 3 | 4 |\n| 4 | 0, 3, 6 |\n| 5 | 1, 1, 5 |\n| 6 | 0, 4 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:12:38",
      "question": "At Riverside Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2014 and 2015?",
      "program": "# Step 1: Set the number of employees in 2014 and 2015\nemployees_2014 = 10\nemployees_2015 = 24\n\n# Step 2: Calculate the change in the number of employees from 2014 to 2015\nchange = employees_2015 - employees_2014\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / employees_2014\n\n# Step 4: Assign the result\nresult = rate_of_change",
      "response": "```python\n# Step 1: Set the number of employees in 2014 and 2015\nemployees_2014 = 10\nemployees_2015 = 24\n\n# Step 2: Calculate the change in the number of employees from 2014 to 2015\nchange = employees_2015 - employees_2014\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / employees_2014\n\n# Step 4: Assign the result\nresult = rate_of_change\n```",
      "true_answer": "14",
      "predicted_answer": "1.4",
      "context": "Employees with health care benefits\n\n| Year | Employees |\n| --- | --- |\n| 2014 | 10 |\n| 2015 | 24 |\n| 2016 | 36 |\n| 2017 | 46 |\n| 2018 | 5 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:12:54",
      "question": "Gabriel conducted a blind taste test on some of his friends in order to determine if organic fruits tasted different than non-organic fruits. Each friend ate one type of fruit. What is the probability that a randomly selected friend tasted apples and preferred non-organic? Simplify any fractions.",
      "program": "# Step 1: Set the number of organic and non-organic apples\norganic_apples = 3\nnon_organic_apples = 5\n\n# Step 2: Calculate the total number of apples\ntotal_apples = organic_apples + non_organic_apples\n\n# Step 3: The number of friends who preferred non-organic apples is equal to non_organic_apples\npreferred_non_organic = non_organic_apples\n\n# Step 4: Find the greatest common divisor (GCD) of preferred_non_organic and total_apples\nfrom math import gcd\ng = gcd(preferred_non_organic, total_apples)\n\n# Step 5: Simplify the numerator and denominator\nsimplified_numerator = preferred_non_organic // g\nsimplified_denominator = total_apples // g\n\n# Step 6: Format the simplified fraction\nfraction = f\"{simplified_numerator}/{simplified_denominator}\"\n\n# Step 7: Assign the result\nresult = fraction",
      "response": "```python\n# Step 1: Set the number of organic and non-organic apples\norganic_apples = 3\nnon_organic_apples = 5\n\n# Step 2: Calculate the total number of apples\ntotal_apples = organic_apples + non_organic_apples\n\n# Step 3: The number of friends who preferred non-organic apples is equal to non_organic_apples\npreferred_non_organic = non_organic_apples\n\n# Step 4: Find the greatest common divisor (GCD) of preferred_non_organic and total_apples\nfrom math import gcd\ng = gcd(preferred_non_organic, total_apples)\n\n# Step 5: Simplify the numerator and denominator\nsimplified_numerator = preferred_non_organic // g\nsimplified_denominator = total_apples // g\n\n# Step 6: Format the simplified fraction\nfraction = f\"{simplified_numerator}/{simplified_denominator}\"\n\n# Step 7: Assign the result\nresult = fraction\n```",
      "true_answer": "0.45454545454545453",
      "predicted_answer": "0.625",
      "context": "|  | Organic | Non-organic |\n| --- | --- | --- |\n| Apples | 3 | 5 |\n| Peaches | 1 | 2 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:14:14",
      "question": "Miss Pratt ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. How many people did fewer than 90 sit-ups?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_6 = [0, 1, 1, 3, 3, 5, 5, 6, 6, 9]  # Represents 60-69 sit-ups\nleaves_stem_7 = [2, 4, 5, 8]                   # Represents 70-79 sit-ups\nleaves_stem_8 = [0, 1, 6, 6, 6, 9]            # Represents 80-89 sit-ups\nleaves_stem_9 = [0]                            # Represents 90 sit-ups\n\n# Step 2: Count all leaves from stems 6, 7, and 8 (fewer than 90 sit-ups)\ncount_6 = len(leaves_stem_6)  # Count of 60-69 sit-ups\ncount_7 = len(leaves_stem_7)  # Count of 70-79 sit-ups\ncount_8 = len(leaves_stem_8)  # Count of 80-89 sit-ups\n\n# Step 3: Add up all students who did fewer than 90 sit-ups\ntotal_students_fewer_than_90 = count_6 + count_7 + count_8\nresult = total_students_fewer_than_90",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_6 = [0, 1, 1, 3, 3, 5, 5, 6, 6, 9]  # Represents 60-69 sit-ups\nleaves_stem_7 = [2, 4, 5, 8]                   # Represents 70-79 sit-ups\nleaves_stem_8 = [0, 1, 6, 6, 6, 9]            # Represents 80-89 sit-ups\nleaves_stem_9 = [0]                            # Represents 90 sit-ups\n\n# Step 2: Count all leaves from stems 6, 7, and 8 (fewer than 90 sit-ups)\ncount_6 = len(leaves_stem_6)  # Count of 60-69 sit-ups\ncount_7 = len(leaves_stem_7)  # Count of 70-79 sit-ups\ncount_8 = len(leaves_stem_8)  # Count of 80-89 sit-ups\n\n# Step 3: Add up all students who did fewer than 90 sit-ups\ntotal_students_fewer_than_90 = count_6 + count_7 + count_8\nresult = total_students_fewer_than_90\n```",
      "true_answer": "21",
      "predicted_answer": "20",
      "context": "Sit-up competition (number of sit-ups)\n\n| Stem | Leaf  |\n| --- | --- |\n| 6 | 0, 1, 1, 3, 3, 5, 5, 6, 6, 9, 9 |\n| 7 | 2, 4, 5, 8 |\n| 8 | 0, 1, 6, 6, 6, 9 |\n| 9 | 0 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:16:03",
      "question": "Francesca found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have at least 10 roller coasters but fewer than 40 roller coasters?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_1 = [2, 2, 4, 4]  # Represents 12, 12, 14, 14\nleaves_stem_2 = []             # No entries for stem 2 (20-29)\nleaves_stem_3 = [9]            # Represents 39\nleaves_stem_4 = [8, 8, 9]      # Represents 48, 48, 49\n\n# Step 2: Count the number of parks with 10-39 roller coasters\n# Stem 1 contributes 4 parks (12, 12, 14, 14)\ncount_1 = len(leaves_stem_1)\n\n# Stem 2 contributes 0 parks (20-29)\ncount_2 = len(leaves_stem_2)\n\n# Stem 3 contributes 1 park (39)\ncount_3 = len(leaves_stem_3)\n\n# Stem 4 contributes 0 parks (40+)\ncount_4 = len(leaves_stem_4)\n\n# Step 3: Add up all parks with at least 10 but fewer than 40 roller coasters\ntotal_parks = count_1 + count_2 + count_3 + count_4\nresult = total_parks",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_1 = [2, 2, 4, 4]  # Represents 12, 12, 14, 14\nleaves_stem_2 = []             # No entries for stem 2 (20-29)\nleaves_stem_3 = [9]            # Represents 39\nleaves_stem_4 = [8, 8, 9]      # Represents 48, 48, 49\n\n# Step 2: Count the number of parks with 10-39 roller coasters\n# Stem 1 contributes 4 parks (12, 12, 14, 14)\ncount_1 = len(leaves_stem_1)\n\n# Stem 2 contributes 0 parks (20-29)\ncount_2 = len(leaves_stem_2)\n\n# Stem 3 contributes 1 park (39)\ncount_3 = len(leaves_stem_3)\n\n# Stem 4 contributes 0 parks (40+)\ncount_4 = len(leaves_stem_4)\n\n# Step 3: Add up all parks with at least 10 but fewer than 40 roller coasters\ntotal_parks = count_1 + count_2 + count_3 + count_4\nresult = total_parks\n```",
      "true_answer": "5",
      "predicted_answer": "8",
      "context": "Roller coasters per amusement park\n\n| Stem | Leaf  |\n| --- | --- |\n| 1 | 2, 2, 4, 4 |\n| 2 |  |\n| 3 | 9 |\n| 4 | 8, 8, 9 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:16:31",
      "question": "A farmer counted the number of apples on each tree in her orchard. How many trees have at least 60 apples but fewer than 88 apples?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_3 = [0, 1, 2, 6, 6, 7, 7]  # Represents 30-39 apples\nleaves_stem_4 = [0, 0, 0, 8]           # Represents 40-49 apples\nleaves_stem_5 = [0, 3, 6, 8, 9]        # Represents 50-59 apples\nleaves_stem_6 = [1, 3]                  # Represents 60-69 apples\nleaves_stem_7 = []                      # Represents 70-79 apples (none)\nleaves_stem_8 = [3, 3, 5, 8, 9]        # Represents 80-89 apples\n\n# Step 2: Count trees with at least 60 apples (stem 6 and stem 7) and fewer than 88 apples (stem 8)\ncount_stem_6 = len(leaves_stem_6)  # Trees with 60-69 apples\ncount_stem_7 = len(leaves_stem_7)  # Trees with 70-79 apples (none)\ncount_stem_8 = len(leaves_stem_8)  # Trees with 80-89 apples\n\n# Step 3: Add up all trees that meet the criteria\ntotal_trees = count_stem_6 + count_stem_7 + count_stem_8\nresult = total_trees",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_3 = [0, 1, 2, 6, 6, 7, 7]  # Represents 30-39 apples\nleaves_stem_4 = [0, 0, 0, 8]           # Represents 40-49 apples\nleaves_stem_5 = [0, 3, 6, 8, 9]        # Represents 50-59 apples\nleaves_stem_6 = [1, 3]                  # Represents 60-69 apples\nleaves_stem_7 = []                      # Represents 70-79 apples (none)\nleaves_stem_8 = [3, 3, 5, 8, 9]        # Represents 80-89 apples\n\n# Step 2: Count trees with at least 60 apples (stem 6 and stem 7) and fewer than 88 apples (stem 8)\ncount_stem_6 = len(leaves_stem_6)  # Trees with 60-69 apples\ncount_stem_7 = len(leaves_stem_7)  # Trees with 70-79 apples (none)\ncount_stem_8 = len(leaves_stem_8)  # Trees with 80-89 apples\n\n# Step 3: Add up all trees that meet the criteria\ntotal_trees = count_stem_6 + count_stem_7 + count_stem_8\nresult = total_trees\n```",
      "true_answer": "5",
      "predicted_answer": "7",
      "context": "Apples per tree\n\n| Stem | Leaf  |\n| --- | --- |\n| 3 | 0, 1, 2, 6, 6, 7, 7 |\n| 4 | 0, 0, 0, 8 |\n| 5 | 0, 3, 6, 8, 9 |\n| 6 | 1, 3 |\n| 7 |  |\n| 8 | 3, 3, 5, 8, 9 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:17:47",
      "question": "A machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the largest number of lemon-flavored candies?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_0 = [2, 5]\nleaves_stem_1 = [3, 5]\nleaves_stem_2 = [5]\nleaves_stem_3 = [3]\nleaves_stem_4 = [7]\nleaves_stem_5 = []\nleaves_stem_6 = [7]\nleaves_stem_7 = [4, 6]\nleaves_stem_8 = [4, 5]\nleaves_stem_9 = [0]\n\n# Step 2: Construct the full list of candies from the stems and leaves\ncandies = []\ncandies.extend([0]*10 + leaves_stem_0)  # 0 stem\ncandies.extend([1]*10 + leaves_stem_1)  # 1 stem\ncandies.extend([2]*10 + leaves_stem_2)  # 2 stem\ncandies.extend([3]*10 + leaves_stem_3)  # 3 stem\ncandies.extend([4]*10 + leaves_stem_4)  # 4 stem\ncandies.extend([5]*10 + leaves_stem_5)  # 5 stem\ncandies.extend([6]*10 + leaves_stem_6)  # 6 stem\ncandies.extend([7]*10 + leaves_stem_7)  # 7 stem\ncandies.extend([8]*10 + leaves_stem_8)  # 8 stem\ncandies.extend([9]*10 + leaves_stem_9)  # 9 stem\n\n# Step 3: Find the maximum number of candies in the list\nmax_candies = max(candies)\nresult = max_candies",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_0 = [2, 5]\nleaves_stem_1 = [3, 5]\nleaves_stem_2 = [5]\nleaves_stem_3 = [3]\nleaves_stem_4 = [7]\nleaves_stem_5 = []\nleaves_stem_6 = [7]\nleaves_stem_7 = [4, 6]\nleaves_stem_8 = [4, 5]\nleaves_stem_9 = [0]\n\n# Step 2: Construct the full list of candies from the stems and leaves\ncandies = []\ncandies.extend([0]*10 + leaves_stem_0)  # 0 stem\ncandies.extend([1]*10 + leaves_stem_1)  # 1 stem\ncandies.extend([2]*10 + leaves_stem_2)  # 2 stem\ncandies.extend([3]*10 + leaves_stem_3)  # 3 stem\ncandies.extend([4]*10 + leaves_stem_4)  # 4 stem\ncandies.extend([5]*10 + leaves_stem_5)  # 5 stem\ncandies.extend([6]*10 + leaves_stem_6)  # 6 stem\ncandies.extend([7]*10 + leaves_stem_7)  # 7 stem\ncandies.extend([8]*10 + leaves_stem_8)  # 8 stem\ncandies.extend([9]*10 + leaves_stem_9)  # 9 stem\n\n# Step 3: Find the maximum number of candies in the list\nmax_candies = max(candies)\nresult = max_candies\n```",
      "true_answer": "90",
      "predicted_answer": "9",
      "context": "Lemon-flavored candies per bag\n\n| Stem | Leaf  |\n| --- | --- |\n| 0 | 2, 5 |\n| 1 | 3, 5 |\n| 2 | 5 |\n| 3 | 3 |\n| 4 | 7 |\n| 5 |  |\n| 6 | 7 |\n| 7 | 4, 6 |\n| 8 | 4, 5 |\n| 9 | 0 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:17:52",
      "question": "While hanging Christmas lights for neighbors, Kayla counted the number of broken lights on each string. What is the smallest number of broken lights?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [4]\nleaves_stem_3 = [4, 7]\nleaves_stem_4 = [5, 7, 9]\nleaves_stem_5 = [3, 5, 8, 8]\nleaves_stem_6 = [6]\nleaves_stem_7 = [0, 8, 9]\nleaves_stem_8 = [7, 8]\n\n# Step 2: Combine all leaves into a single list\nall_broken_lights = (\n    leaves_stem_2 + \n    leaves_stem_3 + \n    leaves_stem_4 + \n    leaves_stem_5 + \n    leaves_stem_6 + \n    leaves_stem_7 + \n    leaves_stem_8\n)\n\n# Step 3: Find the smallest number of broken lights\nsmallest_broken_lights = min(all_broken_lights)\nresult = smallest_broken_lights",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [4]\nleaves_stem_3 = [4, 7]\nleaves_stem_4 = [5, 7, 9]\nleaves_stem_5 = [3, 5, 8, 8]\nleaves_stem_6 = [6]\nleaves_stem_7 = [0, 8, 9]\nleaves_stem_8 = [7, 8]\n\n# Step 2: Combine all leaves into a single list\nall_broken_lights = (\n    leaves_stem_2 + \n    leaves_stem_3 + \n    leaves_stem_4 + \n    leaves_stem_5 + \n    leaves_stem_6 + \n    leaves_stem_7 + \n    leaves_stem_8\n)\n\n# Step 3: Find the smallest number of broken lights\nsmallest_broken_lights = min(all_broken_lights)\nresult = smallest_broken_lights\n```",
      "true_answer": "24",
      "predicted_answer": "0",
      "context": "Broken lights per string\n\n| Stem | Leaf  |\n| --- | --- |\n| 2 | 4 |\n| 3 | 4, 7 |\n| 4 | 5, 7, 9 |\n| 5 | 3, 5, 8, 8 |\n| 6 | 6 |\n| 7 | 0, 8, 9 |\n| 8 | 7, 8 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:19:06",
      "question": "A school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2007 and 2008?",
      "program": "# Step 1: Set the number of straight-A students for 2007 and 2008\nstudents_2007 = 41\nstudents_2008 = 45\n\n# Step 2: Calculate the change in the number of students\nchange = students_2008 - students_2007\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / students_2007\n\n# Step 4: Assign the result\nresult = rate_of_change",
      "response": "```python\n# Step 1: Set the number of straight-A students for 2007 and 2008\nstudents_2007 = 41\nstudents_2008 = 45\n\n# Step 2: Calculate the change in the number of students\nchange = students_2008 - students_2007\n\n# Step 3: Calculate the rate of change\nrate_of_change = change / students_2007\n\n# Step 4: Assign the result\nresult = rate_of_change\n```",
      "true_answer": "4",
      "predicted_answer": "0.0975609756097561",
      "context": "Straight-A students\n\n| Year | Students |\n| --- | --- |\n| 2007 | 41 |\n| 2008 | 45 |\n| 2009 | 43 |\n| 2010 | 44 |\n| 2011 | 49 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:21:04",
      "question": "In the first episode of a reality show, contestants had to spin two wheels of fate. Spinning the first wheel determined the remote location where contestants would reside for the duration of the season. Spinning the second wheel determined which \"bonus survival tool\" they would be allowed to bring, along with a few other necessary items. What is the probability that a randomly selected participant spun the second wheel and landed on a tent and spun the first wheel and landed on desert? Simplify any fractions.",
      "program": "# Step 1: Set the number of outcomes for each wheel\noutcomes_first_wheel = 2  # Desert or Rainforest\noutcomes_second_wheel = 2  # Tent or Matches\n\n# Step 2: Set the number of favorable outcomes for each wheel\nfavorable_first_wheel = 1  # Tent in Desert\nfavorable_second_wheel = 1  # Tent\n\n# Step 3: Calculate the probability for each wheel\nprobability_first_wheel = favorable_first_wheel / outcomes_first_wheel\nprobability_second_wheel = favorable_second_wheel / outcomes_second_wheel\n\n# Step 4: Calculate the combined probability of both events\ncombined_probability = probability_first_wheel * probability_second_wheel\n\n# Step 5: Convert the combined probability to a fraction\nfrom fractions import Fraction\nresult = Fraction(combined_probability).limit_denominator()",
      "response": "```python\n# Step 1: Set the number of outcomes for each wheel\noutcomes_first_wheel = 2  # Desert or Rainforest\noutcomes_second_wheel = 2  # Tent or Matches\n\n# Step 2: Set the number of favorable outcomes for each wheel\nfavorable_first_wheel = 1  # Tent in Desert\nfavorable_second_wheel = 1  # Tent\n\n# Step 3: Calculate the probability for each wheel\nprobability_first_wheel = favorable_first_wheel / outcomes_first_wheel\nprobability_second_wheel = favorable_second_wheel / outcomes_second_wheel\n\n# Step 4: Calculate the combined probability of both events\ncombined_probability = probability_first_wheel * probability_second_wheel\n\n# Step 5: Convert the combined probability to a fraction\nfrom fractions import Fraction\nresult = Fraction(combined_probability).limit_denominator()\n```",
      "true_answer": "0.23076923076923078",
      "predicted_answer": "0.25",
      "context": "|  | Desert | Rainforest |\n| --- | --- | --- |\n| A tent | 3 | 1 |\n| Matches | 5 | 4 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:23:01",
      "question": "A crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 44 broken crayons but fewer than 54 broken crayons?",
      "program": "# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [0, 0, 2, 4, 5, 5, 9]  # Represents 20-29 broken crayons\nleaves_stem_3 = [0, 2, 8, 9, 9]        # Represents 30-39 broken crayons\nleaves_stem_4 = []                     # Represents 40-49 broken crayons (none)\nleaves_stem_5 = [0, 3, 6, 8]          # Represents 50-59 broken crayons\nleaves_stem_6 = [4, 6]                 # Represents 60-69 broken crayons\n\n# Step 2: Count the number of boxes with at least 44 but fewer than 54 broken crayons\n# This corresponds to stem 4 (40-49) and stem 5 (50-59)\ncount_4 = len(leaves_stem_4)          # Count for stem 4 (none)\ncount_5 = len(leaves_stem_5)          # Count for stem 5 (50-59)\n\n# Step 3: Add up the counts for the valid ranges\ntotal_boxes = count_4 + count_5\nresult = total_boxes",
      "response": "```python\n# Step 1: List all leaves for each stem in the stem-and-leaf plot\nleaves_stem_2 = [0, 0, 2, 4, 5, 5, 9]  # Represents 20-29 broken crayons\nleaves_stem_3 = [0, 2, 8, 9, 9]        # Represents 30-39 broken crayons\nleaves_stem_4 = []                     # Represents 40-49 broken crayons (none)\nleaves_stem_5 = [0, 3, 6, 8]          # Represents 50-59 broken crayons\nleaves_stem_6 = [4, 6]                 # Represents 60-69 broken crayons\n\n# Step 2: Count the number of boxes with at least 44 but fewer than 54 broken crayons\n# This corresponds to stem 4 (40-49) and stem 5 (50-59)\ncount_4 = len(leaves_stem_4)          # Count for stem 4 (none)\ncount_5 = len(leaves_stem_5)          # Count for stem 5 (50-59)\n\n# Step 3: Add up the counts for the valid ranges\ntotal_boxes = count_4 + count_5\nresult = total_boxes\n```",
      "true_answer": "2",
      "predicted_answer": "4",
      "context": "Broken crayons per box\n\n| Stem | Leaf  |\n| --- | --- |\n| 2 | 0, 0, 2, 4, 5, 5, 9 |\n| 3 | 0, 2, 8, 9, 9 |\n| 4 |  |\n| 5 | 0, 3, 6, 8 |\n| 6 | 4, 6 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:24:27",
      "question": "Eliana wanted to know if there was a connection between her coffee consumption and how well she slept that night. For weeks, Eliana recorded how many cups of coffee she drank in the morning and how many hours she slept that night. What is the probability that a randomly selected day is one when she slept exactly 7 hours and is one when she drank exactly 0 cups of coffee? Simplify any fractions.",
      "program": "# Step 1: Set the counts for the specific conditions\ndays_with_0_coffee = 5  # Days with 0 cups of coffee and 7 hours of sleep\ndays_with_7_hours = 5    # Days with 7 hours of sleep\n\n# Step 2: Calculate the total number of days recorded\ntotal_days = days_with_0_coffee + days_with_7_hours + 5  # Adding the 5 days with 1 cup of coffee\n\n# Step 3: Find the greatest common divisor (GCD) of the counts for the specific conditions and total days\nfrom math import gcd\ng = gcd(days_with_0_coffee, total_days)\n\n# Step 4: Simplify the numerator and denominator\nsimplified_numerator = days_with_0_coffee // g\nsimplified_denominator = total_days // g\n\n# Step 5: Format the simplified fraction\nfraction = f\"{simplified_numerator}/{simplified_denominator}\"\n\n# Step 6: Assign the result\nresult = fraction",
      "response": "```python\n# Step 1: Set the counts for the specific conditions\ndays_with_0_coffee = 5  # Days with 0 cups of coffee and 7 hours of sleep\ndays_with_7_hours = 5    # Days with 7 hours of sleep\n\n# Step 2: Calculate the total number of days recorded\ntotal_days = days_with_0_coffee + days_with_7_hours + 5  # Adding the 5 days with 1 cup of coffee\n\n# Step 3: Find the greatest common divisor (GCD) of the counts for the specific conditions and total days\nfrom math import gcd\ng = gcd(days_with_0_coffee, total_days)\n\n# Step 4: Simplify the numerator and denominator\nsimplified_numerator = days_with_0_coffee // g\nsimplified_denominator = total_days // g\n\n# Step 5: Format the simplified fraction\nfraction = f\"{simplified_numerator}/{simplified_denominator}\"\n\n# Step 6: Assign the result\nresult = fraction\n```",
      "true_answer": "0.2777777777777778",
      "predicted_answer": "0.3333333333333333",
      "context": "| Column 1 | Column 2 | Column 3 |\n| --- | --- | --- |\n|  | 0 cups of coffee | 1 cup of coffee |\n| 6 hours | 5 | 3 |\n| 7 hours | 5 | 5 |\n",
      "correct": false
    },
    {
      "timestamp": "2025-07-15 23:25:53",
      "question": "At Winchester Consulting, the head of human resources examined how the number of employees with health care benefits varied in response to policy changes. According to the table, what was the rate of change between 2007 and 2008?",
      "program": "# Step 1: Set the number of employees with health care benefits for 2007 and 2008\nemployees_2007 = 20\nemployees_2008 = 13\n\n# Step 2: Calculate the change in the number of employees from 2007 to 2008\nchange = employees_2008 - employees_2007\n\n# Step 3: Calculate the rate of change by dividing the change by the number of employees in 2007\nrate_of_change = change / employees_2007\n\n# Step 4: Assign the result\nresult = rate_of_change",
      "response": "```python\n# Step 1: Set the number of employees with health care benefits for 2007 and 2008\nemployees_2007 = 20\nemployees_2008 = 13\n\n# Step 2: Calculate the change in the number of employees from 2007 to 2008\nchange = employees_2008 - employees_2007\n\n# Step 3: Calculate the rate of change by dividing the change by the number of employees in 2007\nrate_of_change = change / employees_2007\n\n# Step 4: Assign the result\nresult = rate_of_change\n```",
      "true_answer": "-7",
      "predicted_answer": "-0.35",
      "context": "Employees with health care benefits\n\n| Year | Employees |\n| --- | --- |\n| 2006 | 19 |\n| 2007 | 20 |\n| 2008 | 13 |\n| 2009 | 17 |\n| 2010 | 12 |\n",
      "correct": false
    }
  ]
}